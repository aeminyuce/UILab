// out: false
/* grid */ @import '_settings.less';

@grid-columns:                          12;
@container-gutter:                      @highlight-space / 2;

@row-gap-lg:                            15px;
@row-gap:                               @highlight-space / 2;
@row-gap-md:                            5px;
@row-gap-sm:                            2px;
@row-gap-xs:                            1px;

@custom-grids:                          true;
@custom-grid-columns:                   5, 7; // 5, 7, 8, 9, 10, 11 recommended

@static-grids:                          true;
@custom-static-grid-columns:            unit(@btn-default), unit(@btn-lg);
@col-static-increase:                   50; // px
@col-static-steps:                      10; // steps of increases

.container,.fixed {
    width: 100%; display: block;
    padding-right: @container-gutter; padding-left: @container-gutter;

    &:after { clear: both; }
    &:before,&:after { content: ""; display: table; }
}
.fixed { margin-right: auto; margin-left: auto; display: block; }
.no-gutter { padding-right: 0 !important; padding-left: 0 !important; }

html {
    .row { display: flex; } // safari flex bug
}
.row {
    margin-right: -@row-gap; margin-left: -@row-gap; flex-wrap: wrap;

    &:before,&:after { content: normal !important; } // safari flex bug

    & > [class*="col-"] when (@static-grids = false) { padding: @row-gap; }
    & > [class*="col-"]:not(.col-static) when (@static-grids = true) { padding: @row-gap; }

    &-gap {
        &-lg {
            &,&-h { margin-right: -@row-gap-lg; margin-left: -@row-gap-lg; }

            & when (@static-grids = false) {
                & > [class*="col-"] { padding: @row-gap-lg; }
                &-v > [class*="col-"] { padding-top: @row-gap-lg; padding-bottom: @row-gap-lg; }
                &-h > [class*="col-"] { padding-right: @row-gap-lg; padding-left: @row-gap-lg; }
            }
            & when (@static-grids = true) {
                & > [class*="col-"]:not(.col-static) { padding: @row-gap-lg; }
                &-v > [class*="col-"]:not(.col-static) { padding-top: @row-gap-lg; padding-bottom: @row-gap-lg; }
                &-h > [class*="col-"]:not(.col-static) { padding-right: @row-gap-lg; padding-left: @row-gap-lg; }
            }

        }
        &-md {
            &,&-h { margin-right: -@row-gap-md; margin-left: -@row-gap-md; }

            & when (@static-grids = false) {
                & > [class*="col-"] { padding: @row-gap-md; }
                &-v > [class*="col-"] { padding-top: @row-gap-md; padding-bottom: @row-gap-md; }
                &-h > [class*="col-"] { padding-right: @row-gap-md; padding-left: @row-gap-md; }
            }
            & when (@static-grids = true) {
                & > [class*="col-"]:not(.col-static) { padding: @row-gap-md; }
                &-v > [class*="col-"]:not(.col-static) { padding-top: @row-gap-md; padding-bottom: @row-gap-md; }
                &-h > [class*="col-"]:not(.col-static) { padding-right: @row-gap-md; padding-left: @row-gap-md; }
            }
        }
        &-sm {
            &,&-h { margin-right: -@row-gap-sm; margin-left: -@row-gap-sm; }

            & when (@static-grids = false) {
                & > [class*="col-"] { padding: @row-gap-sm; }
                &-v > [class*="col-"] { padding-top: @row-gap-sm; padding-bottom: @row-gap-sm; }
                &-h > [class*="col-"] { padding-right: @row-gap-sm; padding-left: @row-gap-sm; }
            }
            & when (@static-grids = true) {
                & > [class*="col-"]:not(.col-static) { padding: @row-gap-sm; }
                &-v > [class*="col-"]:not(.col-static) { padding-top: @row-gap-sm; padding-bottom: @row-gap-sm; }
                &-h > [class*="col-"]:not(.col-static) { padding-right: @row-gap-sm; padding-left: @row-gap-sm; }
            }
        }
        &-xs {
            &,&-h { margin-right: -@row-gap-xs; margin-left: -@row-gap-xs; }

            & when (@static-grids = false) {
                & > [class*="col-"] { padding: @row-gap-xs; }
                &-v > [class*="col-"] { padding-top: @row-gap-xs; padding-bottom: @row-gap-xs; }
                &-h > [class*="col-"] { padding-right: @row-gap-xs; padding-left: @row-gap-xs; }
            }
            & when (@static-grids = true) {
                & > [class*="col-"]:not(.col-static) { padding: @row-gap-xs; }
                &-v > [class*="col-"]:not(.col-static) { padding-top: @row-gap-xs; padding-bottom: @row-gap-xs; }
                &-h > [class*="col-"]:not(.col-static) { padding-right: @row-gap-xs; padding-left: @row-gap-xs; }
            }
        }
    }
    .no-row-gap {
        &,&-h { margin-right: inherit; margin-left: inherit; }

        & when (@static-grids = false) {
            & > [class*="col-"] { padding: 0; }
            &-v > [class*="col-"] { padding-top: 0; padding-bottom: 0; }
            &-h > [class*="col-"] { padding-right: 0; padding-left: 0; }
        }
        & when (@static-grids = true) {
            & > [class*="col-"]:not(.col-static) { padding: 0; }
            &-v > [class*="col-"]:not(.col-static) { padding-top: 0; padding-bottom: 0; }
            &-h > [class*="col-"]:not(.col-static) { padding-right: 0; padding-left: 0; }
        }
    }
}

[class*="col-"] { min-height: 1px; display: block; }
[class*="push-"],[class*="pull-"] { position: relative; }

._create-cols(@name; @i) {
    @size:  percentage(@i / @grid-columns);

    .col@{name}@{i} { width: @size; }
    .offset@{name}@{i} { margin-left: @size; }
  	.push@{name}@{i} { left: @size; }
  	.pull@{name}@{i} { right: @size; }
};

.col-loop(@i) when (@i > 0) {
    .col-loop(@i - 1);

    @name: ~'-';
    ._create-cols(@name; @i);
}
.col-loop(@grid-columns);

._create-custom-cols(@name; @size) when (@custom-grids = true) {
    .col@{name}@{size}x { width: percentage((100 / @size) / 100); }
};

._custom-cols-loop(@i) when (@i > 0) {
    ._custom-cols-loop(@i - 1);

    @name: ~'-';
    @size: extract(@custom-grid-columns, @i);
    ._create-custom-cols(@name; @size);

}
._custom-cols-loop(length(@custom-grid-columns));

.col-static when (@static-grids = true) {
    width: 100%; display: table; table-layout: fixed;

    & > .row,& > [class*="col-"] { vertical-align: top; display: table-cell; }
    & > .row {
        width: 100%; margin-left: inherit; margin-right: inherit; table-layout: fixed;

        & > [class*="col-"]:not(.col-static):not(.col-12) { float: left; }
    }

}

._create-static-cols(@name; @i) when (@static-grids = true) {
    @width: @col-static-increase * @i;
    .col@{name}@{width} { width: ~'@{width}px'; }
};

.col-static-loop(@i) when (@i >= 0) {
    .col-static-loop(@i - 1);

    @name: ~'-';
    ._create-static-cols(@name; @i);
}
.col-static-loop(@col-static-steps);

._create-custom-static-cols(@name; @size) when (@custom-grids = true) {
    .col@{name}@{size} { width: ~'@{size}px'; }
};

._custom-static-cols-loop(@i) when (@i > 0) {
    ._custom-static-cols-loop(@i - 1);

    @name: ~'-';
    @size: extract(@custom-static-grid-columns, @i);
    ._create-custom-static-cols(@name; @size);
}
._custom-static-cols-loop(length(@custom-static-grid-columns));

@media (@lg-start) {
    .fixed { max-width: @lg-breakpoint; }
    .no-gutter-lg { padding-right: 0 !important; padding-left: 0 !important; }

    .col-lg-loop(@i) when (@i > 0) {
        .col-lg-loop(@i - 1);

        @name: ~'-lg-';
        ._create-cols(@name; @i);
    }
    .col-lg-loop(@grid-columns);

    ._custom-grids-lg-loop(@i) when (@i > 0) {
        ._custom-grids-lg-loop(@i - 1);

        @name: ~'-lg-';
        @size: extract(@custom-grid-columns, @i);
        ._create-custom-cols(@name; @size);

    }
    ._custom-grids-lg-loop(length(@custom-grid-columns));

    .col-lg-static-loop(@i) when (@i >= 0) {
        .col-lg-static-loop(@i - 1);

        @name: ~'-lg-';
        ._create-static-cols(@name; @i);
    }
    .col-lg-static-loop(@col-static-steps);

    ._custom-lg-static-cols-loop(@i) when (@i > 0) {
        ._custom-lg-static-cols-loop(@i - 1);

        @name: ~'-lg-';
        @size: extract(@custom-static-grid-columns, @i);
        ._create-custom-static-cols(@name; @size);
    }
    ._custom-lg-static-cols-loop(length(@custom-static-grid-columns));

}
@media (@md-start) and (@md-finish) {
    .no-gutter-md { padding-right: 0 !important; padding-left: 0 !important; }

    .col-md-loop(@i) when (@i > 0) {
        .col-md-loop(@i - 1);

        @name: ~'-md-';
        ._create-cols(@name; @i);
    }
    .col-md-loop(@grid-columns);

    ._custom-grids-md-loop(@i) when (@i > 0) {
        ._custom-grids-md-loop(@i - 1);

        @name: ~'-md-';
        @size: extract(@custom-grid-columns, @i);
        ._create-custom-cols(@name; @size);

    }
    ._custom-grids-md-loop(length(@custom-grid-columns));

    .col-md-static-loop(@i) when (@i >= 0) {
        .col-md-static-loop(@i - 1);

        @name: ~'-md-';
        ._create-static-cols(@name; @i);
    }
    .col-md-static-loop(@col-static-steps);

    ._custom-md-static-cols-loop(@i) when (@i > 0) {
        ._custom-md-static-cols-loop(@i - 1);

        @name: ~'-md-';
        @size: extract(@custom-static-grid-columns, @i);
        ._create-custom-static-cols(@name; @size);
    }
    ._custom-md-static-cols-loop(length(@custom-static-grid-columns));

    .row {
        &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) {
            & > [class*="col-"]:not([class*="col-md-"]):not([class*="col-sm-"]):not([class*="col-xs-"]) {
                &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) { width: 100%; clear: both; }
            }
            & > [class*="offset-"]:not([class*="offset-md-"]):not([class*="offset-sm-"]):not([class*="offset-xs-"]) {
                &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) { margin-left: 0; }
            }
            & > [class*="push-"]:not([class*="push-md-"]):not([class*="push-sm-"]):not([class*="push-xs-"]) {
                &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) { left: 0; }
            }
            & > [class*="pull-"]:not([class*="pull-md-"]):not([class*="pull-sm-"]):not([class*="pull-xs-"]) {
                &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) { right: 0; }
            }
        }
    }
    .col-static when (@static-grids = true) {
        &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }
    }

}
@media (@sm-start) and (@sm-finish) {
    .no-gutter-md,.no-gutter-sm { padding-right: 0 !important; padding-left: 0 !important; }

    .col-sm-loop(@i) when (@i > 0) {
        .col-sm-loop(@i - 1);

        @name: ~'-sm-';
        ._create-cols(@name; @i);
    }
    .col-sm-loop(@grid-columns);

    ._custom-grids-sm-loop(@i) when (@i > 0) {
        ._custom-grids-sm-loop(@i - 1);

        @name: ~'-sm-';
        @size: extract(@custom-grid-columns, @i);
        ._create-custom-cols(@name; @size);

    }
    ._custom-grids-sm-loop(length(@custom-grid-columns));

    .col-sm-static-loop(@i) when (@i >= 0) {
        .col-sm-static-loop(@i - 1);

        @name: ~'-sm-';
        ._create-static-cols(@name; @i);
    }
    .col-sm-static-loop(@col-static-steps);

    ._custom-sm-static-cols-loop(@i) when (@i > 0) {
        ._custom-sm-static-cols-loop(@i - 1);

        @name: ~'-sm-';
        @size: extract(@custom-static-grid-columns, @i);
        ._create-custom-static-cols(@name; @size);
    }
    ._custom-sm-static-cols-loop(length(@custom-static-grid-columns));

    .row.sm-fluid > [class*="col-"] { width: 100%; clear: both; }
    .row {
        &:not(.no-fluid):not(.xs-fluid) {
            & > [class*="col-"]:not([class*="col-sm-"]):not([class*="col-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { &:extend(.row.sm-fluid > [class*="col-"]); }
            }
            & > [class*="offset-"]:not([class*="offset-sm-"]):not([class*="offset-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { margin-left: 0; }
            }
            & > [class*="push-"]:not([class*="push-sm-"]):not([class*="push-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { left: 0; }
            }
            & > [class*="pull-"]:not([class*="pull-sm-"]):not([class*="pull-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { right: 0; }
            }
        }
    }
    .col-static when (@static-grids = true) {
        &:not(.no-fluid):not(.xs-fluid) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }
    }
}
@media (@xs-finish) {
    .no-gutter-md,.no-gutter-sm,.no-gutter-xs { padding-right: 0 !important; padding-left: 0 !important; }
    .container { min-width: @layout-min; }

    .col-xs-loop(@i) when (@i > 0) {
        .col-xs-loop(@i - 1);

        @name: ~'-xs-';
        ._create-cols(@name; @i);
    }
    .col-xs-loop(@grid-columns);

    ._custom-grids-xs-loop(@i) when (@i > 0) {
        ._custom-grids-xs-loop(@i - 1);

        @name: ~'-xs-';
        @size: extract(@custom-grid-columns, @i);
        ._create-custom-cols(@name; @size);

    }
    ._custom-grids-xs-loop(length(@custom-grid-columns));

    .col-xs-static-loop(@i) when (@i >= 0) {
        .col-xs-static-loop(@i - 1);

        @name: ~'-xs-';
        ._create-static-cols(@name; @i);
    }
    .col-xs-static-loop(@col-static-steps);

    ._custom-xs-static-cols-loop(@i) when (@i > 0) {
        ._custom-xs-static-cols-loop(@i - 1);

        @name: ~'-xs-';
        @size: extract(@custom-static-grid-columns, @i);
        ._create-custom-static-cols(@name; @size);
    }
    ._custom-xs-static-cols-loop(length(@custom-static-grid-columns));

    .row.xs-fluid > [class*="col-"] { width: 100%; clear: both; }
    .row {
        &:not(.no-fluid):not(.xs-fluid) {
            & > [class*="col-"]:not([class*="col-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { &:extend(.row.xs-fluid > [class*="col-"]); }
            }
            & > [class*="offset-"]:not([class*="offset-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { margin-left: 0; }
            }
            & > [class*="push-"]:not([class*="push-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { left: 0; }
            }
            & > [class*="pull-"]:not([class*="pull-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { right: 0; }
            }
        }
    }
    .col-static when (@static-grids = true) {
        &:not(.no-fluid) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }
    }
}
@media (@default-finish) {
    .lg-fluid {
        &.row > [class*="col-"],[class*="col-"]& { width: 100%; clear: both; }
        &.col-static when (@static-grids = true) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }

        [class*="offset-"]& { margin-left: 0; }
        [class*="push-"]& { left: 0; }
        [class*="pull-"]& { right: 0; }
    }
}
@media (@lg-finish) {
    .xl-fluid {
        &.row > [class*="col-"],[class*="col-"]& { width: 100%; clear: both; }
        &.col-static when (@static-grids = true) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }

        [class*="offset-"]& { margin-left: 0; }
        [class*="push-"]& { left: 0; }
        [class*="pull-"]& { right: 0; }
    }
}
@media (@xl-start) {
    .no-gutter-xl { padding-right: 0 !important; padding-left: 0 !important; }

    .col-xl-loop(@i) when (@i > 0) {
        .col-xl-loop(@i - 1);

        @name: ~'-xl-';
        ._create-cols(@name; @i);
    }
    .col-xl-loop(@grid-columns);

    ._custom-grids-xl-loop(@i) when (@i > 0) {
        ._custom-grids-xl-loop(@i - 1);

        @name: ~'-xl-';
        @size: extract(@custom-grid-columns, @i);
        ._create-custom-cols(@name; @size);

    }
    ._custom-grids-xl-loop(length(@custom-grid-columns));

    .col-xl-static-loop(@i) when (@i >= 0) {
        .col-xl-static-loop(@i - 1);

        @name: ~'-xl-';
        ._create-static-cols(@name; @i);
    }
    .col-xl-static-loop(@col-static-steps);

    ._custom-xl-static-cols-loop(@i) when (@i > 0) {
        ._custom-xl-static-cols-loop(@i - 1);

        @name: ~'-xl-';
        @size: extract(@custom-static-grid-columns, @i);
        ._create-custom-static-cols(@name; @size);
    }
    ._custom-xl-static-cols-loop(length(@custom-static-grid-columns));

}