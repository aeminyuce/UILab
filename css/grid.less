// out: false
/* grid */ @import '_settings.less';

@grid-columns:                          12;
//@grid-xs-columns: 4;
//@grid-sm-columns: 12;
//@grid-md-columns: 16;
@custom-grids:                          true;

@static-grids:                          true;
@col-static-increase:                   50; // px
@col-static-steps:                      10; // steps of increases

.container,.fixed {
    width: 100%; display: block;

    &:after { clear: both; }
    &:before,&:after { content: ""; display: table; }
}
.container:not([class*="no-gutter"]),.fixed { padding-right: 10px; padding-left: 10px; }
.fixed { margin-right: auto; margin-left: auto; display: block; }
.no-gutter { padding-right: 0 !important; padding-left: 0 !important; }

html {
    .row { display: flex; } // safari flex bug
}
.row {
    margin-right: -10px; margin-left: -10px; flex-wrap: wrap;

    &:before,&:after { content: normal !important; } // safari flex bug

    & > [class*="col-"] when (@static-grids = false) { padding: 10px; }
    & > [class*="col-"]:not(.col-static) when (@static-grids = true) { padding: 10px; }

    &-gap {
        &-lg {
            &,&-h { margin-right: -15px; margin-left: -15px; }

            & when (@static-grids = false) {
                & > [class*="col-"] { padding: 15px; }
                &-v > [class*="col-"] { padding-top: 15px; padding-bottom: 15px; }
                &-h > [class*="col-"] { padding-right: 15px; padding-left: 15px; }
            }
            & when (@static-grids = true) {
                & > [class*="col-"]:not(.col-static) { padding: 15px; }
                &-v > [class*="col-"]:not(.col-static) { padding-top: 15px; padding-bottom: 15px; }
                &-h > [class*="col-"]:not(.col-static) { padding-right: 15px; padding-left: 15px; }
            }

        }
        &-md {
            &,&-h { margin-right: -5px; margin-left: -5px; }

            & when (@static-grids = false) {
                & > [class*="col-"] { padding: 5px; }
                &-v > [class*="col-"] { padding-top: 5px; padding-bottom: 5px; }
                &-h > [class*="col-"] { padding-right: 5px; padding-left: 5px; }
            }
            & when (@static-grids = true) {
                & > [class*="col-"]:not(.col-static) { padding: 5px; }
                &-v > [class*="col-"]:not(.col-static) { padding-top: 5px; padding-bottom: 5px; }
                &-h > [class*="col-"]:not(.col-static) { padding-right: 5px; padding-left: 5px; }
            }
        }
        &-sm {
            &,&-h { margin-right: -2px; margin-left: -2px; }

            & when (@static-grids = false) {
                & > [class*="col-"] { padding: 2px; }
                &-v > [class*="col-"] { padding-top: 2px; padding-bottom: 2px; }
                &-h > [class*="col-"] { padding-right: 2px; padding-left: 2px; }
            }
            & when (@static-grids = true) {
                & > [class*="col-"]:not(.col-static) { padding: 2px; }
                &-v > [class*="col-"]:not(.col-static) { padding-top: 2px; padding-bottom: 2px; }
                &-h > [class*="col-"]:not(.col-static) { padding-right: 2px; padding-left: 2px; }
            }
        }
        &-xs {
            &,&-h { margin-right: -1px; margin-left: -1px; }

            & when (@static-grids = false) {
                & > [class*="col-"] { padding: 1px; }
                &-v > [class*="col-"] { padding-top: 1px; padding-bottom: 1px; }
                &-h > [class*="col-"] { padding-right: 1px; padding-left: 1px; }
            }
            & when (@static-grids = true) {
                & > [class*="col-"]:not(.col-static) { padding: 1px; }
                &-v > [class*="col-"]:not(.col-static) { padding-top: 1px; padding-bottom: 1px; }
                &-h > [class*="col-"]:not(.col-static) { padding-right: 1px; padding-left: 1px; }
            }
        }
    }
    .no-row-gap {
        &,&-h { margin-right: inherit; margin-left: inherit; }

        & when (@static-grids = false) {
            & > [class*="col-"] { padding: 0; }
            &-v > [class*="col-"] { padding-top: 0; padding-bottom: 0; }
            &-h > [class*="col-"] { padding-right: 0; padding-left: 0; }
        }
        & when (@static-grids = true) {
            & > [class*="col-"]:not(.col-static) { padding: 0; }
            &-v > [class*="col-"]:not(.col-static) { padding-top: 0; padding-bottom: 0; }
            &-h > [class*="col-"]:not(.col-static) { padding-right: 0; padding-left: 0; }
        }
    }
}

[class*="col-"] { min-height: 1px; display: block; }
[class*="push-"],[class*="pull-"] { position: relative; }

._create-cols(@name; @i) {
    @size:  percentage(@i / @grid-columns);

    .col@{name}@{i} { width: @size; }
    .offset@{name}@{i} { margin-left: @size; }
  	.push@{name}@{i} { left: @size; }
  	.pull@{name}@{i} { right: @size; }
};

.col-loop(@i) when (@i > 0) {
    .col-loop(@i - 1);

    @name: ~'-';
    ._create-cols(@name; @i);
}
.col-loop(@grid-columns);

.col- when (@custom-grids = true) { // custom grids
    &5x { width: 100 / 5%; }
    &7x { width: 100 / 7%; }
}

.col-static when (@static-grids = true) {
    width: 100%; display: table; table-layout: fixed;

    & > .row,& > [class*="col-"] { vertical-align: top; display: table-cell; }
    & > .row {
        width: 100%; margin-left: inherit; margin-right: inherit; table-layout: fixed;

        & > [class*="col-"]:not(.col-static):not(.col-12) { float: left; }
    }

}

._create-static-cols(@name; @i) when (@static-grids = true) {
    @width: @col-static-increase * @i;
    .col@{name}@{width} { width: ~'@{width}px'; }
};

.col-static-loop(@i) when (@i >= 0) {
    .col-static-loop(@i - 1);

    @name: ~'-';
    ._create-static-cols(@name; @i);
}
.col-static-loop(@col-static-steps);

.col- when (@static-grids = true) and (@custom-grids = true) { // custom static grids
    &32 { width: 100 / 5%; }
    &42 { width: 100 / 7%; }
}

@media (@lg-start) {
    .fixed { max-width: @lg-breakpoint; }
    .no-gutter-lg { padding-right: 0 !important; padding-left: 0 !important; }

    .col-lg-loop(@i) when (@i > 0) {
        .col-lg-loop(@i - 1);

        @name: ~'-lg-';
        ._create-cols(@name; @i);
    }
    .col-lg-loop(@grid-columns);

    .col-lg- when (@custom-grids = true) { // custom grids
        &5x { width: 100 / 5%; }
        &7x { width: 100 / 7%; }
    }

    .col-lg-static-loop(@i) when (@i >= 0) {
        .col-lg-static-loop(@i - 1);

        @name: ~'-lg-';
        ._create-static-cols(@name; @i);
    }
    .col-lg-static-loop(@col-static-steps);

    .col-lg- when (@static-grids = true) and (@custom-grids = true) { // custom static grids
        &32 { width: 100 / 5%; }
        &42 { width: 100 / 7%; }
    }

}
@media (@md-start) and (@md-finish) {
    .no-gutter-md { padding-right: 0 !important; padding-left: 0 !important; }

    .col-md-loop(@i) when (@i > 0) {
        .col-md-loop(@i - 1);

        @name: ~'-md-';
        ._create-cols(@name; @i);
    }
    .col-md-loop(@grid-columns);

    .col-md- when (@custom-grids = true) { // custom grids
        &5x { width: 100 / 5%; }
        &7x { width: 100 / 7%; }
    }

    .col-md-static-loop(@i) when (@i >= 0) {
        .col-md-static-loop(@i - 1);

        @name: ~'-md-';
        ._create-static-cols(@name; @i);
    }
    .col-md-static-loop(@col-static-steps);

    .col-md- when (@static-grids = true) and (@custom-grids = true) { // custom static grids
        &32 { width: 100 / 5%; }
        &42 { width: 100 / 7%; }
    }

    .row {
        &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) {
            & > [class*="col-"]:not([class*="col-md-"]):not([class*="col-sm-"]):not([class*="col-xs-"]) {
                &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) { width: 100%; clear: both; }
            }
            & > [class*="offset-"]:not([class*="offset-md-"]):not([class*="offset-sm-"]):not([class*="offset-xs-"]) {
                &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) { margin-left: 0; }
            }
            & > [class*="push-"]:not([class*="push-md-"]):not([class*="push-sm-"]):not([class*="push-xs-"]) {
                &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) { left: 0; }
            }
            & > [class*="pull-"]:not([class*="pull-md-"]):not([class*="pull-sm-"]):not([class*="pull-xs-"]) {
                &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) { right: 0; }
            }
        }
    }
    .col-static when (@static-grids = true) {
        &:not(.no-fluid):not(.sm-fluid):not(.xs-fluid) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }
    }

}
@media (@sm-start) and (@sm-finish) {
    .no-gutter-md,.no-gutter-sm { padding-right: 0 !important; padding-left: 0 !important; }

    .col-sm-loop(@i) when (@i > 0) {
        .col-sm-loop(@i - 1);

        @name: ~'-sm-';
        ._create-cols(@name; @i);
    }
    .col-sm-loop(@grid-columns);

    .col-sm- when (@custom-grids = true) { // custom grids
        &5x { width: 100 / 5%; }
        &7x { width: 100 / 7%; }
    }

    .col-sm-static-loop(@i) when (@i >= 0) {
        .col-sm-static-loop(@i - 1);

        @name: ~'-sm-';
        ._create-static-cols(@name; @i);
    }
    .col-sm-static-loop(@col-static-steps);

    .col-sm- when (@static-grids = true) and (@custom-grids = true) { // custom static grids
        &32 { width: 100 / 5%; }
        &42 { width: 100 / 7%; }
    }

    .row.sm-fluid > [class*="col-"] { width: 100%; clear: both; }
    .row {
        &:not(.no-fluid):not(.xs-fluid) {
            & > [class*="col-"]:not([class*="col-sm-"]):not([class*="col-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { &:extend(.row.sm-fluid > [class*="col-"]); }
            }
            & > [class*="offset-"]:not([class*="offset-sm-"]):not([class*="offset-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { margin-left: 0; }
            }
            & > [class*="push-"]:not([class*="push-sm-"]):not([class*="push-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { left: 0; }
            }
            & > [class*="pull-"]:not([class*="pull-sm-"]):not([class*="pull-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { right: 0; }
            }
        }
    }
    .col-static when (@static-grids = true) {
        &:not(.no-fluid):not(.xs-fluid) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }
    }
}
@media (@xs-finish) {
    .no-gutter-md,.no-gutter-sm,.no-gutter-xs { padding-right: 0 !important; padding-left: 0 !important; }
    .container { min-width: @layout-min; }

    .col-xs-loop(@i) when (@i > 0) {
        .col-xs-loop(@i - 1);

        @name: ~'-xs-';
        ._create-cols(@name; @i);
    }
    .col-xs-loop(@grid-columns);

    .col-xs- when (@custom-grids = true) { // custom grids
        &5x { width: 100 / 5%; }
        &7x { width: 100 / 7%; }
    }

    .col-xs-static-loop(@i) when (@i >= 0) {
        .col-xs-static-loop(@i - 1);

        @name: ~'-xs-';
        ._create-static-cols(@name; @i);
    }
    .col-xs-static-loop(@col-static-steps);

    .col-xs- when (@static-grids = true) and (@custom-grids = true) { // custom static grids
        &32 { width: 100 / 5%; }
        &42 { width: 100 / 7%; }
    }

    .row.xs-fluid > [class*="col-"] { width: 100%; clear: both; }
    .row {
        &:not(.no-fluid):not(.xs-fluid) {
            & > [class*="col-"]:not([class*="col-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { &:extend(.row.xs-fluid > [class*="col-"]); }
            }
            & > [class*="offset-"]:not([class*="offset-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { margin-left: 0; }
            }
            & > [class*="push-"]:not([class*="push-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { left: 0; }
            }
            & > [class*="pull-"]:not([class*="pull-xs-"]) {
                &:not(.no-fluid):not(.xs-fluid) { right: 0; }
            }
        }
    }
    .col-static when (@static-grids = true) {
        &:not(.no-fluid) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }
    }
}
@media (@default-finish) {
    .lg-fluid {
        &.row > [class*="col-"],[class*="col-"]& { width: 100%; clear: both; }
        &.col-static when (@static-grids = true) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }

        [class*="offset-"]& { margin-left: 0; }
        [class*="push-"]& { left: 0; }
        [class*="pull-"]& { right: 0; }
    }
}
@media (@lg-finish) {
    .xl-fluid {
        &.row > [class*="col-"],[class*="col-"]& { width: 100%; clear: both; }
        &.col-static when (@static-grids = true) {
            & > .row,& > [class*="col-"] { width: 100%; display: block; }
        }

        [class*="offset-"]& { margin-left: 0; }
        [class*="push-"]& { left: 0; }
        [class*="pull-"]& { right: 0; }
    }
}
@media (@xl-start) {
    .no-gutter-xl { padding-right: 0 !important; padding-left: 0 !important; }

    .col-xl-loop(@i) when (@i > 0) {
        .col-xl-loop(@i - 1);

        @name: ~'-xl-';
        ._create-cols(@name; @i);
    }
    .col-xl-loop(@grid-columns);

    .col-xl- when (@custom-grids = true) { // custom grids
        &5x { width: 100 / 5%; }
        &7x { width: 100 / 7%; }
    }

    .col-xl-static-loop(@i) when (@i >= 0) {
        .col-xl-static-loop(@i - 1);

        @name: ~'-xl-';
        ._create-static-cols(@name; @i);
    }
    .col-xl-static-loop(@col-static-steps);

    .col-xl- when (@static-grids = true) and (@custom-grids = true) { // custom static grids
        &32 { width: 100 / 5%; }
        &42 { width: 100 / 7%; }
    }

}